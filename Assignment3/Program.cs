using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignmet3
{
   
        interface IDbFunctions
        {
            void insert();
            void update();
            void delete();

        }
        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("in main");

                Manager obj1 = new GeneralManager("Ram", 10, 50000, "Software developer", "Vacation & Paid Time Off");
                Console.WriteLine(obj1.Basic);
                Console.WriteLine(obj1.Name);
                Console.WriteLine(obj1.Deptno);
                Console.WriteLine(obj1.Empno);
                Console.WriteLine(obj1.Designation);
                Console.WriteLine("=================");


                CEO obj = new CEO("Raam", 20, 150000);//
                Console.WriteLine(obj.CalcNetSalary());
                Console.WriteLine(obj.Name);
                Console.WriteLine(obj.Deptno);
                Console.WriteLine(obj.Empno);
                Console.WriteLine("=================");

                Console.ReadLine();
            }
        }
        public abstract class Employee : IDbFunctions
        {

            //string Name -> no blanks
            private string name;
            public string Name
            {
                set
                {
                    if (value != "")
                        name = value;
                    else
                    {
                        Console.WriteLine("Invalid name");
                        name = "no_name";
                    }
                }
                get { return name; }
            }

            //int EmpNo -> readonly, autogenerated
            private static int empno1 = 0;
            private int empno;
            public int Empno
            {

                get { return empno; }
            }

            //short DeptNo -> > 0
            private short deptno;
            public short Deptno
            {
                set
                {
                    if (value > 0)
                        deptno = value;
                    else
                    {
                        Console.WriteLine("invalid deptno assigned to 1");
                        deptno = 1;
                    }
                }
                get { return deptno; }
            }

            //abstract decimal Basic
            protected decimal basic;
            public abstract decimal Basic
            {
                set;
                get;
            }

            //abstract decimal CalcNetSalary()
            public abstract decimal CalcNetSalary();

            public virtual void insert()
            {
                Console.WriteLine("Employee IDb insert");
            }

            public virtual void update()
            {
                Console.WriteLine("Employee IDb update");
            }

            public virtual void delete()
            {
                Console.WriteLine("Employee IDb delete");
            }



            public Employee(string name = "", short deptno = 0, decimal basic = 0)
            {
                empno1++;
                this.empno = empno1;
                this.Name = name;
                this.Deptno = deptno;
                this.Basic = basic;
            }

        }

        public abstract class Manager : Employee, IDbFunctions
        {
            public override decimal Basic
            {
                get { return basic; }
                set
                {
                    if (value >= 5000 && value < 10000)
                        basic = value;
                    else
                    {
                        Console.WriteLine("invalid basic");
                        basic = 5000;
                    }
                }
            }

            public override decimal CalcNetSalary()
            {
                return basic * 10;
            }

            private string designation;
            public string Designation
            {
                set
                {
                    if (value != "")
                        designation = value;
                    else
                    {
                        Console.WriteLine("designation can not be blank");
                        designation = "Designation";
                    }
                }
                get { return designation; }
            }

            public override void insert()
            {
                Console.WriteLine("Manager IDb insert");
            }

            public override void update()
            {
                Console.WriteLine("Manager IDb update");
            }

            public override void delete()
            {
                Console.WriteLine("Manager IDb delete");
            }

            public Manager(string name = "", short deptno = 0, decimal basic = 0, string designation = "GM") : base(name, deptno, basic)
            {
                this.Designation = designation;
            }
        }

        public class GeneralManager : Manager, IDbFunctions
        {
            protected string perks;
            public string Perks
            {
                set { perks = value; }
                get { return perks; }

            }
            public override decimal Basic
            {
                get { return basic; }
                set
                {
                    if (value >= 50000 && value < 100000)
                        basic = value;
                    else
                    {
                        Console.WriteLine("invalid basic");
                        basic = 50000;
                    }
                }
            }
            public override decimal CalcNetSalary()
            {
                return basic * 12;
            }


            public GeneralManager(string name = "", short deptno = 0, decimal basic = 0, string designation = "GM", string perks = "none") : base(name, deptno, basic, designation)
            {
                this.Perks = perks;
            }
            public override void insert()
            {
                Console.WriteLine("GM IDb insert");
            }

            public override void update()
            {
                Console.WriteLine("GM IDb update");
            }

            public override void delete()
            {
                Console.WriteLine("GM IDb delete");
            }

        }

        public class CEO : Employee, IDbFunctions
        {
            public override decimal Basic
            {
                get { return basic; }
                set
                {
                    if (value >= 100000 && value < 500000)
                        basic = value;
                    else
                    {
                        Console.WriteLine("invalid basic");
                        basic = 100000;
                    }
                }
            }

            public sealed override decimal CalcNetSalary()
            {
                return basic * 15;
            }

            public sealed override void insert()
            {
                Console.WriteLine("CEO IDb insert");
            }

            public sealed override void update()
            {
                Console.WriteLine("CEO IDb update");
            }

            public sealed override void delete()
            {
                Console.WriteLine("CEO IDb delete");
            }

            public CEO(string name = "", short deptno = 0, decimal basic = 0) : base(name, deptno, basic)
            {
                //this.Basic = basic;
            }
        }
    }
