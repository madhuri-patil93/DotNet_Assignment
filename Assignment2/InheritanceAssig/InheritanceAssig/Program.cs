using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace InheritanceAssig
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Main");

            Manager obj1 = new GeneralManager("Priya", 10, 1000, "Software developer", "Vacation & Paid Time Off");
            Console.WriteLine(obj1.Basic);
            Console.WriteLine(obj1.Name);
            Console.WriteLine(obj1.Deptno);
            Console.WriteLine(obj1.Empno);
            Console.WriteLine(obj1.Designation);
            Console.WriteLine("=================");


            CEO obj = new CEO("Ppriya", 20, 50000);//
            Console.WriteLine(obj.CalcNetSalary());
            Console.WriteLine(obj.Name);
            Console.WriteLine(obj.Deptno);
            Console.WriteLine(obj.Empno);
            Console.WriteLine("=================");

            Console.ReadLine();
        }
    }
    public abstract class Employee
    {

        //string Name -> no blanks
        private string name;
        public string Name
        {
            set
            {
                if (value != "")
                    name = value;
                else
                {
                    Console.WriteLine("Invalid name");
                    name = "no_name";
                }
            }
            get { return name; }
        }

        //int EmpNo -> readonly, autogenerated
        private static int empno1 = 0;
        private int empno;
        public int Empno
        {

            get { return empno; }
        }

        //short DeptNo -> > 0
        private short deptno;
        public short Deptno
        {
            set
            {
                if (value > 0)
                    deptno = value;
                else
                {
                    Console.WriteLine("invalid deptno assigned to 1");
                    deptno = 1;
                }
            }
            get { return deptno; }
        }

        //abstract decimal Basic
        protected decimal basic;
        public abstract decimal Basic
        {
            set;
            get;
        }

        //abstract decimal CalcNetSalary()
        public abstract decimal CalcNetSalary();

        public Employee(string name = "", short deptno = 0, decimal basic = 0)
        {
            empno1++;
            this.empno = empno1;
            this.Name = name;
            this.Deptno = deptno;
            this.Basic = basic;
        }

    }

    public abstract class Manager : Employee
    {
        public override decimal Basic
        {
            get { return basic; }
            set
            {
                if (value >= 5000 && value < 10000)
                    basic = value;
                else
                {
                    Console.WriteLine("invalid basic");
                    basic = 5000;
                }
            }
        }

        public override decimal CalcNetSalary()
        {
            return basic * 10;
        }

        private string designation;
        public string Designation
        {
            set
            {
                if (value != "")
                    designation = value;
                else
                {
                    Console.WriteLine("designation can not be blank");
                    designation = "Designation";
                }
            }
            get { return designation; }
        }

        public Manager(string name = "", short deptno = 0, decimal basic = 0, string designation = "GM") : base(name, deptno, basic)
        {
            this.Designation = designation;
        }
    }

    public class GeneralManager : Manager
    {
        protected string perks;
        public string Perks
        {
            set { perks = value; }
            get { return perks; }

        }
        public override decimal Basic
        {
            get { return basic; }
            set
            {
                if (value >= 50000 && value < 100000)
                    basic = value;
                else
                {
                    Console.WriteLine("invalid basic");
                    basic = 50000;
                }
            }
        }
        public override decimal CalcNetSalary()
        {
            return basic * 12;
        }


        public GeneralManager(string name = "", short deptno = 0, decimal basic = 0, string designation = "GM", string perks = "none") : base(name, deptno, basic, designation)
        {
            this.Perks = perks;
        }

    }

    public class CEO : Employee
    {
        public override decimal Basic
        {
            get { return basic; }
            set
            {
                if (value >= 100000 && value < 500000)
                    basic = value;
                else
                {
                    Console.WriteLine("invalid basic");
                    basic = 100000;
                }
            }
        }

        public sealed override decimal CalcNetSalary()
        {
            return basic * 15;
        }


        public CEO(string name = "", short deptno = 0, decimal basic = 0) : base(name, deptno, basic)
        {

        }
    }
}